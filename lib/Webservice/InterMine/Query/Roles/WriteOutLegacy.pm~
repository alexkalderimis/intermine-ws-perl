package InterMine::Query::Roles::WriteOutLegacy;

use Moose::Role;
requires (qw/name view sort_order logic joins
             path_descriptions model_name type_dict
             constraints coded_constraints/);
use XML::Smart;
use List::MoreUtils qw(uniq);
use InterMine::Path qw(type_of);

sub to_xml {
    my $self = shift;
    my $XML = XML::Smart->new;
    my %query = (
	name            => $self->name,
	view            => $self->joined_view(' '),
	sortOrder       => $self->sort_order,
	model		=> $self->model_name,
	);
    $query{longDescription} = $self->description if $self->description;
    $query{constraintLogic} = $self->logic->code
	if ($self->coded_constraints > 1);

    push @{$XML->{query}}, \%query;
    for my $pd   ($self->path_descriptions) {
	push @{$XML->{query}{pathDescription}}, {$pd->to_hash};
    }
    for my $join ($self->joins) {
	push @{$XML->{query}{join}}, {$join->to_hash};
    }

    my @paths     = sort uniq(map {$_->path} $self->all_constraints);
    my $type_dict = $self->type_dict;
    for (@paths) {
	my $type = $type_dict->{$_} || type_of($self->model, $_);
	my %elem = {
	    path => $_,
	    type => $type,
	};
	my @cons_for_this_node =
	    sort {$a->code cmp $b->code}
		grep {$_->path eq $_} $self->coded_constraints;
	$elem->{constraint} = [] if @cons_for_this_node;
	for my $c (@cons_for_this_node) {
	    my %hash = $c->to_hash;
	    delete $hash{path};
	    push @{$elem->{constraint}}, \%hash;
	}
	push @{$XML->{query}{node}}, $elem;
    }

    my $xml =$XML->{query}('<xml>');
    return $xml;
}

1;
